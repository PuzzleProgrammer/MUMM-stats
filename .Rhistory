lon <- h5read(g,'lon')
# 5X5 pixel box average, centered at 49.404 N, -123.965 W
# Step 1: find the index closest to 49.404 N, -123.965 W
closestLat <- 0.0
closestLon <- 0.0
closestVal <- 0
for (i in 1:length(lat)){
if( ( abs(49.404-lat[i]) + abs(-123.965-lon[i]) ) < ( abs(-123.965-closestLon) + abs(49.404-closestLat) ) ){
closestVal <- i
closestLat <- lat[i]
closestLon <- lon[i]
}
}
# Step 2: get 24 surrounding indices
x <- ((closestVal-1) %%  dim(lat)[1])+1
y <- ((closestVal-1) %/% dim(lat)[1])+1
# hx is a matrix of x co-ords, hy is a matrix of y co-ords
hx<-matrix(0,5,5)
hy<-matrix(0,5,5)
hh<-matrix(0,5,5) 
for(i in 1:5){
for(j in 1:5){
hx[i,j] <- x+i-2
hy[i,j] <- y+j-2
hh[i,j] <- c(x+i-2,y+j-2)
}
}
# Step 3: pull 25 values for gamma, epsilon and count valid
valid <- 0
for (i in 1:25){
print(hh[i])
}
hh
hi
hx
hy
hx<-matrix(0,5,5)
hy<-matrix(0,5,5)
hh<-matrix(0,5,5) 
for(i in 1:5){
for(j in 1:5){
hx[i,j] <- x+i-2
hy[i,j] <- y+j-2
hh[i,j] <- (x+i-2)+(((y+j-2)-1)*dim(lat)[1])
}
}
hx
hy
hh
lat[1,1]
lat[1,2]
lat[2]
lat[1]
lat[2,1]
lat[x,y]
lat[130076]
closestVal
hx<-matrix(0,5,5)
hy<-matrix(0,5,5)
hh<-matrix(0,5,5) 
for(i in 1:5){
for(j in 1:5){
hx[i,j] <- x+i-2
hy[i,j] <- y+j-2
hh[i,j] <- ((x+i-2)-1)+(((y+j-2)-1)*dim(lat)[1])
}
}
hh
hx<-matrix(0,5,5)
hy<-matrix(0,5,5)
hh<-matrix(0,5,5) 
for(i in 1:5){
for(j in 1:5){
hx[i,j] <- x+i-2
hy[i,j] <- y+j-2
hh[i,j] <- ((x+i-2)-1)+(((y+j-2))*dim(lat)[1])
}
}
hh
hx<-matrix(0,5,5)
hy<-matrix(0,5,5)
hh<-matrix(0,5,5) 
for(i in 1:5){
for(j in 1:5){
hx[i,j] <- x+i-2
hy[i,j] <- y+j-2
hh[i,j] <- ((x+i-2)-1)+(((y+j-2)-2)*dim(lat)[1])
}
}
hh
lat[x,y]
lat[129673]
for (i in 1:25){
print(hh[i])
}
lat[hh]
lon[hh]
avg(lat[hh])
median(lat[hh])
mean(lat[hh])
gam[hh]
epsilon[hh]
hh
epsilon
more
gma
gam
mean(lat[hh]-1)
mean(lat[hh]-2)
mean(epsilon[hh]-1)
mean(gamma[hh]-1)
mean(gam[hh]-1)
mean(gam[hh],trim=1)
mean(epsilon[hh],trim=1)
mean(epsilon[hh],trim=2)
mean(epsilon[hh]-1,trim=0)
mean(gam[hh],trim=0)
mean(gam[hh])
gam
gam[hh]
mean(gam[hh])
mean(gam[hh],trim=0.9707906)
((0.970791*22)+(0.9707906*3))/25
sum(gam[hh])/25
sum(gam[hh])-3(0.9707906)
sum(gam[hh])-(3*0.9707906)
/22
sum(gam[hh])-(3*0.9707906)/22
(sum(gam[hh])-(3*0.9707906))/22
sum(gam[hh]*100000000)/25
sum(gam[hh]*100000000)
sum(gam[hh]*1000000000000)
sum(gam[hh]*100000000000)
sum(gam[hh]*1000000000)
(sum(gam[hh])-(3*gam[1]))/22
gam[1]
(sum(gam[hh])-(3*gam[hh[1]]))/22
mean(gam[hh],trim=0.9707906)
mean(gam[hh],trim=gam[hh[1]])
(sum(gam[hh])-(2*gam[hh[1]]))/22
(sum(gam[hh])-(2*gam[hh[1]]))/23
(sum(gam[hh])
)
(sum(gam[hh]))/25
mean(gam[hh],)
mean(gam[hh],gam[hh[1]].rm)
mean(gam[hh],0.rm)
(sum(gam[hh])-(3*gam[1]))/22
mean(gam[gam!=gam[1]])
(gam[gam!=gam[1]])
(sum(gam[hh])-(3*gam[hh[1]]))/22
(gam[hh,gam!=gam[1]])
(gam[hh,gam[hh]!=gam[1]])
(gam[hh],gam[hh]!=gam[1]])
(gam[hh gam[hh]!=gam[1]])
(gam[hh && gam[hh]!=gam[1]])
(gam[hh!=hh[1]])
(gam[hh])
(gam[hh==hh[1]])
hh[1]
(gam[hh==gam[hh[1]]])
(gam[hh=gam[hh[1]]])
(gam[gam[hh[1]]])
(gam[hh[1]])
(gam[hh=gam[hh[1]]])
(gam[hh==gam[hh[1]]])
(gam[hh=hh[1]])
(gam[hh[1]])
(gam[hh])
gam
epsilon
epsilon[epsilon=1]
epsilon[epsilon>1]
epsilon[epsilon>1.6]
epsilon[epsilon>1.7]
epsilon[epsilon>1.8]
epsilon[epsilon<1.5]
epsilon[epsilon>1.8]
epsilon[epsilon=1.8]
epsilon[epsilon==1.8]
epsilon[epsilon==1]
gam
table(gam)
sort(table(gam),decreasing=TRUE)[1]
sort(table(epsilon),decreasing=TRUE)[1]
image(gam)
image(epsilon)
image(epsilon[hh])
epsilon[hh]
e2<-epsilon[lat>49.404]
image(e2)
e2
e2<-subset(epsilon,lat>9.404)
e2<-subset(epsilon,epsilon>9.404)
e2<-subset(epsilon,>9.404)
e2<-subset(epsilon,y)
e2<-subset(epsilon,select=y)
image(e2)
plot(e2)
image(e2,epsilon)
image(e2),image(epsilon)
image(e2)
image(epsilon)
image(e2)
image(epsilon)
image(e2)
image(epsilon)
e2<-subset(epsilon,select=x)
image(e2)
image(epsilon)
image(e2)
image(epsilon)
image(gamma)
image(gam)
image(epsilon)
gam <- h5read(g,'Gamma')
image(gam)
h5ls(g,all=T)
e2<-subset(epsilon,select=(epsilon>49.404))
class(e2)
class(epsilon)
image(epsilon[epsilon[,1]>49.404,])
epsilon[epsilon[,1]>49.404,]
epsilon[epsilon[,1]>-123.965,]
image(epsilon[epsilon[,1]>-123.965,])
image(epsilon[lat[,1]>-123.965,])
image(epsilon[lon[,1]>-123.965,])
image(epsilon[lon[,1]>-130.965,])
image(epsilon[lon[,1]>-125.965,])
image(epsilon[lon[,1]>-130.965,])
image(epsilon[lon[,1]<-125.965,])
image(epsilon[lon[,1]<-120.965,])
epsilon[lon[,1]<-120.965,]
epsilon[lon[,1]<-12.965,]
eee <- epsilon
for(ii in eee){
ii<-0
}
image(eee)
for(ii in eee){
print(ii)
}
x
y
lat[x,y]
epsilon[x,y]
epsilon[x+1,y]
epsilon[x,y-10]
epsilon[x,y-100]
epsilon[x,y-200]
epsilon[x-200,y-200]
epsilon[x-200,y-200]
dim(epsilon)
epsilon[100,10]
image(eee)
eee[1,]<-2
image(eee)
eee[2,]<-2
eee[3,]<-2
image(eee)
eee[1,]<-0
eee[2,]<-0
image(eee)
image(gam)
image(log(gam))
image(log(log(gam)))
hist(gam,breaks=40,col="darkmagenta")
hist(gam,breaks=40,col="darkmagenta",xlim=c(0,0.95))
hist(gam,breaks=40,col="darkmagenta",xlim=c(0,0.95))
hist(gam,breaks=40,col="darkmagenta",xlim=c(0,0.5))
hist(gam,breaks=40,col="darkmagenta",xlim=c(0,0.95),ylim=c(0,100))
hist(gam,breaks=40,col="darkmagenta",ylim=c(0,100))
hist(gam,breaks=40,col="darkmagenta")
sort(table(gam),decreasing=TRUE)
sort(table(gam),increasing=TRUE)
sort(table(gam),decreasing=FALSE)
sort(table(gam),descending=TRUE)
order(table(gam))
sort(table(gam))
sort(gam)
sort(gam,descending=TRUE)
sort(gam,decreasing=TRUE)
max.print
options(max.print=999999)
sort(gam,decreasing=TRUE)
image(gam)
image(1/gam)
sort(gam)
gam2<-gam
gam2[gam2==1]<-NA
image(gam2)
image(gam)
image(gam2)
image(1/gam2)
image(1/gam)
sort(gam2,)
gam2[gam2>0.977]<-NA
image(gam2)
image(1/gam2)
sort(gam,decreasing=TRUE)
gam2[gam2<0.92]<-NA
image(gam2)
gam2<-gam
gam2[gam2<0.92]<-NA
image(gam2)
image(epsilon)
image(gam2)
image(epsilon)
image(gam2)
image(epsilon)
image(gam2)
for(i in epsilon[hh]){
print(i)
}
print("dfsf")
print(dfsf)
valid <- 0
epsVal <- 0
gamVal <- 0
for (i in 1:25){
if(epsilon[hh[i]]!=1){
valid <- valid+1
epsVal <- epsVal+epsilon[hh[i]]
gamVal <- gamVal+gam[hh[i]]
}
#print(gam[hh[i]])
}
# Step 4: Calculate averages, alert if theres not enough
epsAvg <- 0
gamAvg <- 0
if(valid<20){
print("Error, not enough good pixels")
epsAvg <- 0
gamAvg <- 0
}
epsAvg <- epsVal/valid
gamAvg <- gamVal/valid
epsAvg
hh
epsilon[hh]
matrix(epsilon[hh])
matrix(epsilon[hh],rows=5)
matrix(epsilon[hh],5)
matrix(epsilon[hh],5,5)
matrix(gam[hh],5,5)
hh
hhh<-matrix(0,20,20)
for(i in 1:20){
for(j in 1:20){
hhh[i,j]<-((x+i-10)-1)+(((y+j-10)-2)dim(lat)[1])
for(i in 1:20){
for(j in 1:20){
hhh[i,j]<-((x+i-10)-1)+(((y+j-10)-2)*dim(lat)[1])
}
}
hhh
image(hhh)
matrix(gam[hhh],20,20)
image(matrix(gam[hhh],20,20))
image(matrix(epsilon[hhh],20,20))
hhhh<-matrix(0,101,101)
for(i in 1:101){
for(j in 1:101){
hhhh[i,j]<-((x+i-50)-1)+(((y+j-50)-2)*dim(lat)[1])
}
}
image(matrix(epsilon[hhhh],101,101))
image(epsilon
)
image(matrix(epsilon[hhhh],101,101))
image(epsilon)
image(matrix(epsilon[hhhh],101,101))
image(epsilon)
image(lat)
image(lat[lat>-123.965])
lat[lat>-123.965]
latt<-lat
latt[lat>-123.965]<-NA
image(latt)
latt
latt<-lat
latt
latt[lat>49.404]<-NA
image(latt)
lonn<-lon
lattitude<-latitude
latitude <- h5read(g,'latitude')
lattitude<-latitude
lattitude[latitude>49.404]<-NA
image(lattitude)
image(latt)
image(lattitude)
lonn<-lon
lonn[lon>-123.965]<-NA
image(lonn)
image(latt)
image(epsilon)
image(t(matrix(epsilon[hhhh],101,101)))
image(t(epsilon))
rotate <- function(x) t(apply(x, 2, rev))
image(rotate(t(epsilon)))
image(rotate(t(gam)))
image(rotate(t(lat)))
image(rotate(t(lon)))
image(lon)
lon
sort(lon)
lon[lon==12.965]<-NA
sort(lon)
image(lon)
image(rotate(t(lon)))
image(rotate(t(epsilon)))
image(rotate(t(matrix(epsilon[hhhh],101,101))))
image(rotate(t(epsilon)))
image(rotate(t(matrix(epsilon[hhhh],101,101))))
rotate2 <- function(x) t(apply(t(x), 2, rev))
image(rotate(t(matrix(epsilon[hhhh],101,101))))
image(rotate(t(epsilon)))
image(rotate2(epsilon))
quit()
# if you want to view the bands 'properly', then they must be transposed and rotated
 rotate <- function(x) t(apply(t(x), 2, rev))
# then show images with
# image(rotate(<BAND_NAME>))
# get the file name and store as a variable
# g <- 'A2016002205000SWIR_EG.L2_LAC.x.hdf'
g <- args[1]
if(is.na(g)){
print("Error, invalid or missing filename")
quit()
}
#r Load `raster` and `rhdf5` packages and read NIS data into R
library(raster)
library(rhdf5)
library(rgdal)
# list bands in file
# h5ls(g,all=T)
# read in epsilon values
epsilon <- h5read(g,'Epsilon_SingleScatter')
# read in gamma values
gam <- h5read(g,'Gamma')
# read in array of latitude co-ordinates
lat <- h5read(g,'lat')
# read in array of longitude co-ordinates
lon <- h5read(g,'lon')
# 5X5 pixel box average, centered at 49.404 N, -123.965 W
# Step 1: find the index closest to 49.404 N, -123.965 W
closestLat <- 0.0
closestLon <- 0.0
closestVal <- 0
for (i in 1:length(lat)){
if( ( abs(49.404-lat[i]) + abs(-123.965-lon[i]) ) < ( abs(-123.965-closestLon) + abs(49.404-closestLat) ) ){
closestVal <- i
closestLat <- lat[i]
closestLon <- lon[i]
}
}
# Step 2: get 24 surrounding indices
x <- ((closestVal-1) %%  dim(lat)[1])+1
y <- ((closestVal-1) %/% dim(lat)[1])+1
# hx is a matrix of x co-ords, hy is a matrix of y co-ords
hx<-matrix(0,5,5)
hy<-matrix(0,5,5)
hh<-matrix(0,5,5) 
for(i in 1:5){
for(j in 1:5){
hx[i,j] <- x+i-2
hy[i,j] <- y+j-2
hh[i,j] <- ((x+i-2)-1)+(((y+j-2)-2)*dim(lat)[1])
}
}
# Step 3: pull 25 values for gamma, epsilon and count valid
valid <- 0
epsVal <- 0
gamVal <- 0
for (i in 1:25){
if(epsilon[hh[i]]!=1){
valid <- valid+1
epsVal <- epsVal+epsilon[hh[i]]
gamVal <- gamVal+gam[hh[i]]
}
#print(gam[hh[i]])
}
# Step 4: Calculate averages, alert if theres not enough
epsAvg <- 0
gamAvg <- 0
if(valid<20){
print("Error, not enough good pixels")
epsAvg <- 0
gamAvg <- 0
}
epsAvg <- epsVal/valid
gamAvg <- gamVal/valid
# Save values to a line in an xml file, or just output and let bash handle it?
image(rotate(epsilon))
h5ls(g,all=T)
image(lat)
image(rotate(lat))
image(rotate(lon))
image(rotate(chlor_a))
gdf<-"dgfgdf"
gdf
gdf<-h5read(chlor_a)
gdf<-h5read(g,'chlor_a')
gdf
image(gdf)
image(rotate(gdf))
h5ls(g,all=T)
image(rotate(gam))
image(rotate(log(gam)))
image(rotate(log(gam)))
quit()
